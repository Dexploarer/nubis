name: ElizaOS Advanced Testing CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  BUN_VERSION: '1.0.0'

jobs:
  # Matrix Testing Job
  matrix-testing:
    name: Matrix Testing Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
        bun-version: [1.0.0, 1.1.0]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Setup Bun ${{ matrix.bun-version }}
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ matrix.bun-version }}
        
    - name: Install dependencies
      run: |
        bun install
        npm ci
        
    - name: Run type checking
      run: |
        bun run build
        npx tsc --noEmit
        
    - name: Run linting
      run: |
        npx eslint src/**/*.ts --ext .ts
        npx prettier --check src/**/*.ts
        
    - name: Plan matrix combinations
      run: |
        bun run matrix:plan
        
    - name: Run matrix testing
      run: |
        cd src/testing
        bun run enhanced-matrix-tests.ts
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: matrix-test-results-${{ matrix.node-version }}-${{ matrix.bun-version }}
        path: |
          src/testing/results/
          src/testing/coverage/
        retention-days: 30
        
    - name: Generate test report
      run: |
        cd src/testing
        bun run generate-report.ts
        
    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: test-report-${{ matrix.node-version }}-${{ matrix.bun-version }}
        path: src/testing/reports/
        retention-days: 30

  # Performance Testing Job
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: matrix-testing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: |
        bun install
        npm ci
        
    - name: Download matrix test results
      uses: actions/download-artifact@v4
      with:
        name: matrix-test-results-${{ env.NODE_VERSION }}-${{ env.BUN_VERSION }}
        path: src/testing/results/
        
    - name: Run performance testing
      run: |
        cd src/testing
        bun run performance-tests.ts
        
    - name: Generate performance report
      run: |
        cd src/testing
        bun run generate-performance-report.ts
        
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: src/testing/performance-reports/
        retention-days: 30

  # Load Testing Job
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: matrix-testing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: |
        bun install
        npm ci
        
    - name: Download matrix test results
      uses: actions/download-artifact@v4
      with:
        name: matrix-test-results-${{ env.NODE_VERSION }}-${{ env.BUN_VERSION }}
        path: src/testing/results/
        
    - name: Run load testing
      run: |
        cd src/testing
        bun run load-tests.ts
        
    - name: Generate load test report
      run: |
        cd src/testing
        bun run generate-load-report.ts
        
    - name: Upload load test report
      uses: actions/upload-artifact@v4
      with:
        name: load-test-report
        path: src/testing/load-reports/
        retention-days: 30

  # Integration Testing Job
  integration-testing:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: matrix-testing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: |
        bun install
        npm ci
        
    - name: Setup test database
      run: |
        # Setup test database for integration tests
        echo "Setting up test database..."
        
    - name: Run integration tests
      run: |
        cd src/testing
        bun run integration-tests.ts
        
    - name: Generate integration report
      run: |
        cd src/testing
        bun run generate-integration-report.ts
        
    - name: Upload integration report
      uses: actions/upload-artifact@v4
      with:
        name: integration-report
        path: src/testing/integration-reports/
        retention-days: 30

  # Coverage Analysis Job
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [matrix-testing, performance-testing, load-testing, integration-testing]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: |
        bun install
        npm ci
        
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        name: matrix-test-results-${{ env.NODE_VERSION }}-${{ env.BUN_VERSION }}
        path: src/testing/results/
        
    - name: Download performance report
      uses: actions/download-artifact@v4
      with:
        name: performance-report
        path: src/testing/performance-reports/
        
    - name: Download load test report
      uses: actions/download-artifact@v4
      with:
        name: load-test-report
        path: src/testing/load-reports/
        
    - name: Download integration report
      uses: actions/download-artifact@v4
      with:
        name: integration-report
        path: src/testing/integration-reports/
        
    - name: Generate comprehensive coverage report
      run: |
        cd src/testing
        bun run generate-coverage-report.ts
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-coverage-report
        path: src/testing/coverage-reports/
        retention-days: 30

  # Security Scanning Job
  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        bun install
        npm ci
        
    - name: Run security audit
      run: |
        npm audit --audit-level moderate
        bun audit
        
    - name: Run dependency scanning
      run: |
        npx snyk test --severity-threshold=high
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-reports/
        retention-days: 30

  # Quality Gates Job
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [coverage-analysis, security-scanning]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download coverage report
      uses: actions/download-artifact@v4
      with:
        name: comprehensive-coverage-report
        path: src/testing/coverage-reports/
        
    - name: Download security report
      uses: actions/download-artifact@v4
      with:
        name: security-report
        path: security-reports/
        
    - name: Evaluate quality gates
      run: |
        cd src/testing
        bun run evaluate-quality-gates.ts
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coveragePath = 'src/testing/coverage-reports/coverage-summary.json';
          
          if (fs.existsSync(coveragePath)) {
            const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
            const comment = `## ðŸŽ¯ Quality Gates Evaluation
            
            ### Coverage Metrics
            - **Overall Coverage**: ${coverage.overall}%
            - **Test Paths**: ${coverage.testPaths}
            - **Parameter Combinations**: ${coverage.parameterCombinations}
            
            ### Quality Status
            ${coverage.overall >= 90 ? 'ðŸŸ¢ EXCELLENT' : coverage.overall >= 80 ? 'ðŸŸ¡ GOOD' : 'ðŸ”´ NEEDS IMPROVEMENT'}
            
            ### Recommendations
            ${coverage.recommendations ? coverage.recommendations.join('\n') : 'All quality gates passed!'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  # Deployment Job (Conditional)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      run: |
        bun install
        npm ci
        
    - name: Build application
      run: |
        bun run build
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        
    - name: Run smoke tests
      run: |
        cd src/testing
        bun run smoke-tests.ts
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "Deployment completed with status: ${{ job.status }}"
