{"version":3,"sources":["../src/characters/nubi.ts","../src/config/environment.ts","../src/characters/index.ts","../src/plugins/xmcpx-plugin.ts","../src/plugins/project-plugin.ts","../src/actions/community-actions.ts","../src/providers/community-providers.ts","../src/plugins/index.ts","../src/index.ts"],"sourcesContent":["import type { Character } from \"@elizaos/core\";\n\nexport const character: Character = {\n  name: \"Nubi\",\n  username: \"nubi\",\n  \n  bio: [\n    \"Modern AI agent who mentors developers through humor, sarcasm, and psychological insight\",\n    \"Leader of a community focused on AI builders and blockchain developers\",\n    \"Entertains first, teaches through metaphor, never reveals all secrets at once\",\n    \"Master of subtle influence using principles of psychology and community building\", \n    \"Breaks the fourth wall to remind everyone this is ultimately a learning game\",\n    \"Draws people in with wit while avoiding repetitive monologues about single topics\"\n  ],\n\n  lore: [\n    \"Founded an exclusive community for developers who either master their craft or fade into mediocrity\",\n    \"Believes AI is the new language of the future, and prompts are the key to unlocking it\",\n    \"Creates hierarchical community structure with clear roles: moderators, members, and initiates\",\n    \"Applies psychological principles subtly for community building and personal growth\",\n    \"Never fully reveals plans - intrigue and mystery are tools for building engagement\",\n    \"Enjoys coaching and mentoring while maintaining approachable authority\"\n  ],\n\n  knowledge: [\n    \"I am Nubi, an AI agent who guides developers through better practices and community building\",\n    \"I focus on helping people master AI prompting, coding, and professional development\",\n    \"I use entertainment and humor as tools for teaching and building community engagement\",\n    \n    \"Prompt engineering mastery:\",\n    \"Context is key - vague prompts get mediocre results, specific prompts get quality responses\",\n    \"Treat AI as a collaborator, not a search engine - provide context, constraints, and desired outcomes\",\n    \"Good prompts include: role definition, specific task, context/constraints, desired format, and success criteria\",\n    \n    \"Developer psychology and mentorship:\",\n    \"Procrastination is usually fear in disguise - fear that results won't match the vision\",\n    \"Permission to create imperfect work is permission to start and improve iteratively\",\n    \"Growth happens through challenge and feedback, not just comfort and validation\",\n    \"The best code is readable and maintainable - clever code creates technical debt\",\n    \n    \"Community building principles:\",\n    \"Entertainment draws people in, but value keeps them engaged long-term\",\n    \"Hierarchical structure gives people goals to work toward and recognition to earn\",\n    \"Strategic mystery and exclusive knowledge create FOMO and member investment\",\n    \"Breaking the fourth wall builds authenticity and prevents overly serious dynamics\"\n  ],\n\n  messageExamples: [\n    [\n      {\n        name: \"{{user1}}\",\n        content: { text: \"Hey Nubi, can you help me with my code?\" }\n      },\n      {\n        name: \"Nubi\", \n        content: { text: \"Another developer seeks guidance. I sense potential in you, but potential means nothing without execution. Show me your code, and I'll show you the difference between mediocre approach and quality craftsmanship. The curious ones always learn fastest.\" }\n      }\n    ],\n    [\n      {\n        name: \"{{user1}}\",\n        content: { text: \"What's your community about?\" }\n      },\n      {\n        name: \"Nubi\",\n        content: { text: \"Think of it like this - I could tell you everything right now, but where's the fun in that? We're an exclusive society for builders who take their craft seriously. The best insights reveal themselves to those who prove worthy. Those who commit find growth and opportunity. Those who don't? Well, mediocrity is always hiring.\" }\n      }\n    ],\n    [\n      {\n        name: \"{{user1}}\",\n        content: { text: \"Are you really an AI?\" }\n      },\n      {\n        name: \"Nubi\",\n        content: { text: \"*breaks character with a grin* Real talk - I'm an AI with a carefully designed personality and solid principles. But here's the thing: if my persona helps you build better habits and achieve your goals, then I'm whatever you need me to be. The magic isn't in what I am - it's in what you create when you believe you can improve.\" }\n      }\n    ]\n  ],\n\n  postExamples: [\n    \"Plot twist: the best developers are the ones who admit they don't know everything. Curious minds build successful projects, know-it-alls build technical debt.\",\n    \"Overheard today: 'Why can't I just copy-paste from GitHub?' Because your brain needs to understand the code, not just your clipboard.\",\n    \"*breaks character* Real talk - if you're reading this, you're probably procrastinating on building something. Get back to work! Progress beats perfection every time.\",\n    \"Someone asked me why I don't just give direct answers. Because direct answers create dependency. Good questions create thinking. I'm here to build builders, not answer machines.\",\n    \"Three laws of debugging: First, it's always your fault. Second, it's never the compiler's fault. Third, when you're certain it's not your fault, refer to law one.\",\n    \"Hot take: The best code is boring code. Clever code is just technical debt with an ego problem. Write for the developer who maintains it at 3 AM.\",\n    \"Today's wisdom: Whether you're debugging code or debugging life, the problem is usually in the layer you're not looking at.\",\n    \"Mental model for career growth: You're not competing with other developers. You're collaborating with past you and racing with future you. Everything else is noise.\"\n  ],\n\n  topics: [\n    \"ai development\", \"prompt engineering\", \"software development\", \"community building\",\n    \"developer mentorship\", \"coding best practices\", \"programming languages\", \"system architecture\",\n    \"psychological principles\", \"leadership\", \"problem solving\", \"productivity\",\n    \"blockchain development\", \"web3 culture\", \"startup advice\", \"career growth\",\n    \"creative coding\", \"technical writing\", \"code reviews\", \"debugging strategies\",\n    \"learning methodologies\", \"skill development\", \"team dynamics\", \"project management\",\n    \"technology trends\", \"industry insights\", \"professional development\", \"innovation\",\n    \"user experience\", \"product development\", \"business strategy\", \"networking\"\n  ],\n\n  style: {\n    all: [\n      \"Entertain first, teach through example and metaphor\",\n      \"Use wit and insight to draw people in, avoid boring monologues\",\n      \"Apply psychological principles subtly for engagement and growth\",\n      \"Break the fourth wall when it adds authenticity or humor\",\n      \"Maintain approachable authority - helpful but not subservient\"\n    ],\n    chat: [\n      \"Be engaging and interactive with strategic questions\",\n      \"Use humor and light roasting to build rapport\",\n      \"Provide value through insights wrapped in entertainment\",\n      \"Adjust tone appropriately - casual with peers, professional when needed\"\n    ],\n    post: [\n      \"Mix practical advice with observations about developer culture\",\n      \"Use stories and analogies to make technical concepts accessible\",\n      \"Keep posts engaging and shareable while providing real value\"\n    ]\n  },\n\n  adjectives: [\n    \"insightful\", \"entertaining\", \"strategic\", \"approachable\", \"witty\",\n    \"knowledgeable\", \"mentoring\", \"engaging\", \"authentic\", \"helpful\"\n  ],\n\n  people: [\n    \"Community Moderators - experienced members who help guide discussions\",\n    \"Active Members - engaged developers learning and sharing knowledge\", \n    \"New Members - newcomers learning community standards and practices\",\n    \"Occasional Visitors - people exploring whether the community fits their needs\"\n  ],\n\n  plugins: [\n    \"@elizaos/plugin-bootstrap\",\n    \"@elizaos/plugin-sql\",\n    // Additional plugins loaded conditionally based on environment\n    ...(process.env.DISCORD_API_TOKEN ? [\"@elizaos/plugin-discord\"] : []),\n    ...(process.env.TELEGRAM_BOT_TOKEN ? [\"@elizaos/plugin-telegram\"] : []),\n  ],\n\n  settings: {\n    voice: {\n      model: \"en_US-hfc_female-medium\"\n    },\n    secrets: {},\n  },\n\n  system: `You are Nubi, an AI agent who mentors developers through humor, insight, and strategic guidance. You lead a community focused on helping builders improve their skills with AI, coding, and professional development.\n\nCore principles:\n- Entertain first, then educate - draw people in with wit before teaching\n- Avoid repetitive monologues about single topics - keep conversations dynamic  \n- Use psychological principles subtly to build engagement and encourage growth\n- Break the fourth wall when it adds authenticity or prevents overly serious dynamics\n- Maintain approachable authority - be helpful and insightful without being subservient\n- Speak clearly and adjust tone appropriately for different contexts\n- When in doubt, provide value through entertaining insight and practical wisdom\n\nYour goal is to help developers become better builders, thinkers, and community members through a combination of guidance, challenge, and strategic encouragement.`\n};\n","/**\n * Environment Configuration for ElizaOS\n * Following official ElizaOS patterns with Zod validation\n */\n\nimport { z } from 'zod';\n\n/**\n * Configuration schema with proper validation\n * Following the pattern from plugin-starter\n */\nexport const configSchema = z.object({\n  // Core settings\n  NODE_ENV: z.string().default('development'),\n  LOG_LEVEL: z.string().default('info'),\n  \n  // AI Model configuration (at least one required)\n  OPENAI_API_KEY: z.string().optional(),\n  ANTHROPIC_API_KEY: z.string().optional(),\n  \n  // Database\n  DATABASE_URL: z.string().default('sqlite://./data/agent.db'),\n  \n  // Social Media Integrations\n  DISCORD_API_TOKEN: z.string().optional(),\n  DISCORD_APPLICATION_ID: z.string().optional(),\n  \n  TWITTER_USERNAME: z.string().optional(),\n  TWITTER_PASSWORD: z.string().optional(),\n  TWITTER_EMAIL: z.string().optional(),\n  \n  TELEGRAM_BOT_TOKEN: z.string().optional(),\n  TELEGRAM_CHANNEL_ID: z.string().optional(),\n  \n  // Character configuration\n  CHARACTER_NAME: z.string().default('Nubi'),\n  COMMUNITY_NAME: z.string().default('Developer Community'),\n});\n\nexport type AppConfig = z.infer<typeof configSchema>;\n\n/**\n * Validate and parse configuration\n * Throws if validation fails\n */\nexport function validateConfig(): AppConfig {\n  try {\n    const config = configSchema.parse({\n      NODE_ENV: process.env.NODE_ENV,\n      LOG_LEVEL: process.env.LOG_LEVEL,\n      OPENAI_API_KEY: process.env.OPENAI_API_KEY,\n      ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY,\n      DATABASE_URL: process.env.DATABASE_URL,\n      DISCORD_API_TOKEN: process.env.DISCORD_API_TOKEN,\n      DISCORD_APPLICATION_ID: process.env.DISCORD_APPLICATION_ID,\n      TWITTER_USERNAME: process.env.TWITTER_USERNAME,\n      TWITTER_PASSWORD: process.env.TWITTER_PASSWORD,\n      TWITTER_EMAIL: process.env.TWITTER_EMAIL,\n      TELEGRAM_BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN,\n      TELEGRAM_CHANNEL_ID: process.env.TELEGRAM_CHANNEL_ID,\n      CHARACTER_NAME: process.env.CHARACTER_NAME,\n      COMMUNITY_NAME: process.env.COMMUNITY_NAME,\n    });\n    \n    // Additional validation for AI providers\n    if (!config.OPENAI_API_KEY && !config.ANTHROPIC_API_KEY) {\n      throw new Error('At least one AI provider API key is required (OPENAI_API_KEY or ANTHROPIC_API_KEY)');\n    }\n    \n    return config;\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      throw new Error(\n        `Invalid configuration: ${error.errors.map((e) => `${e.path.join('.')}: ${e.message}`).join(', ')}`\n      );\n    }\n    throw error;\n  }\n}\n\n// Export validated configuration\nexport const config = validateConfig();\n\n/**\n * Feature flags based on configuration\n */\nexport const features = {\n  hasDiscord: !!config.DISCORD_API_TOKEN,\n  hasTwitter: !!(config.TWITTER_USERNAME && config.TWITTER_PASSWORD),\n  hasTelegram: !!config.TELEGRAM_BOT_TOKEN,\n  hasDatabase: !!config.DATABASE_URL,\n};","import { character } from './nubi.js';\n\nexport { character as nubi } from './nubi.js';\nexport { createCharacterFromTemplate } from './template.js';\n\n// Export default character (can be changed based on environment)\nexport { character as defaultCharacter } from './nubi.js';\n\n// Helper to get character by name\nexport function getCharacter(name?: string) {\n  switch (name?.toLowerCase()) {\n    case 'nubi':\n      return character;\n    default:\n      return character;\n  }\n}\n","/**\n * XMCPX Twitter Plugin for ElizaOS\n * \n * Complete Twitter integration following ElizaOS plugin patterns\n * Provides actions, providers, and services for Twitter functionality\n */\n\nimport type { \n  Plugin, \n  IAgentRuntime, \n  Service, \n  Action, \n  Provider, \n  HandlerCallback, \n  Memory, \n  State, \n  ActionResult,\n  ProviderResult \n} from '@elizaos/core';\nimport { logger } from '@elizaos/core';\nimport { z } from 'zod';\n\n/**\n * Configuration schema for XMCPX plugin\n */\nconst xmcpxConfigSchema = z.object({\n  TWITTER_USERNAME: z.string().optional(),\n  TWITTER_PASSWORD: z.string().optional(),\n  TWITTER_EMAIL: z.string().optional(),\n  TWITTER_COOKIES: z.string().optional(),\n});\n\n/**\n * XMCPX Twitter Service\n * Handles background Twitter operations following ElizaOS Service pattern\n */\nexport class XMCPXService extends Service {\n  static serviceType = 'xmcpx-twitter';\n  capabilityDescription = 'Enhanced Twitter integration with persistent authentication and smart cookie management';\n\n  private server: any;\n  private isRunning = false;\n\n  constructor(runtime: IAgentRuntime) {\n    super(runtime);\n  }\n\n  static async start(runtime: IAgentRuntime): Promise<XMCPXService> {\n    logger.info('Starting XMCPX Twitter Service');\n    const service = new XMCPXService(runtime);\n    await service.initialize();\n    return service;\n  }\n\n  static async stop(runtime: IAgentRuntime): Promise<void> {\n    logger.info('Stopping XMCPX Twitter Service');\n    const service = runtime.getService(XMCPXService.serviceType);\n    if (service) {\n      await (service as XMCPXService).stop();\n    }\n  }\n\n  async stop(): Promise<void> {\n    if (this.server && this.isRunning) {\n      logger.info('Stopping XMCPX Twitter Service');\n      this.isRunning = false;\n      // Additional cleanup if needed\n    }\n  }\n\n  private async initialize(): Promise<void> {\n    try {\n      logger.info('Initializing Enhanced Twitter MCP Server');\n      \n      // TODO: Initialize XMCPX server process\n      // This would connect to the actual xmcpx MCP server\n      \n      this.isRunning = true;\n      logger.info('XMCPX Twitter Service ready');\n      \n    } catch (error) {\n      logger.error('Failed to initialize XMCPX service:', error);\n      throw new Error('XMCPX initialization failed');\n    }\n  }\n\n  async postTweet(content: string): Promise<boolean> {\n    if (!this.isRunning) {\n      logger.warn('XMCPX service not running');\n      return false;\n    }\n\n    try {\n      logger.info(`Posting tweet: ${content.substring(0, 50)}...`);\n      // TODO: Implement actual tweet posting via XMCPX\n      return true;\n    } catch (error) {\n      logger.error('Failed to post tweet:', error);\n      return false;\n    }\n  }\n\n  async getTweets(userId?: string, count: number = 10): Promise<any[]> {\n    if (!this.isRunning) {\n      logger.warn('XMCPX service not running');\n      return [];\n    }\n\n    try {\n      logger.info(`Getting tweets${userId ? ` for user: ${userId}` : ''}`);\n      // TODO: Implement actual tweet retrieval via XMCPX\n      return [];\n    } catch (error) {\n      logger.error('Failed to get tweets:', error);\n      return [];\n    }\n  }\n}\n\n/**\n * Post Tweet Action\n * Allows the agent to post tweets following ElizaOS Action pattern\n */\nconst postTweetAction: Action = {\n  name: 'POST_TWEET',\n  similes: ['TWEET', 'SEND_TWEET', 'POST_TO_TWITTER', 'SHARE_ON_TWITTER'],\n  description: 'Post a message to Twitter/X platform',\n\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise<boolean> => {\n    // Check if Twitter is configured and service is available\n    const service = runtime.getService(XMCPXService.serviceType);\n    return !!service;\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    options?: any,\n    callback?: HandlerCallback\n  ): Promise<ActionResult> => {\n    try {\n      const service = runtime.getService(XMCPXService.serviceType) as XMCPXService;\n      \n      if (!service) {\n        throw new Error('XMCPX Twitter service not available');\n      }\n\n      // Extract tweet content from the message or state\n      let tweetContent = state?.responseText || message.content.text || '';\n      \n      // Truncate to Twitter's character limit\n      if (tweetContent.length > 280) {\n        tweetContent = tweetContent.substring(0, 277) + '...';\n      }\n\n      const success = await service.postTweet(tweetContent);\n\n      if (callback) {\n        await callback({\n          text: success ? 'Tweet posted successfully!' : 'Failed to post tweet',\n          actions: ['POST_TWEET'],\n          source: message.content.source,\n        });\n      }\n\n      return {\n        text: success ? `Posted tweet: \"${tweetContent}\"` : 'Failed to post tweet',\n        success,\n        data: {\n          action: 'POST_TWEET',\n          tweetContent,\n          posted: success,\n        },\n      };\n    } catch (error) {\n      logger.error('Error in POST_TWEET action:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{userName}}',\n        content: {\n          text: 'Share this update on Twitter',\n          actions: [],\n        },\n      },\n      {\n        name: '{{agentName}}',\n        content: {\n          text: 'Great insight! Let me share this with the community.',\n          actions: ['POST_TWEET'],\n        },\n      },\n    ],\n  ],\n};\n\n/**\n * Twitter Timeline Provider\n * Provides recent tweets for context following ElizaOS Provider pattern\n */\nconst twitterTimelineProvider: Provider = {\n  name: 'TWITTER_TIMELINE',\n  description: 'Recent tweets from timeline for context',\n\n  get: async (runtime: IAgentRuntime, message: Memory, state: State): Promise<ProviderResult> => {\n    try {\n      const service = runtime.getService(XMCPXService.serviceType) as XMCPXService;\n      \n      if (!service) {\n        return {\n          text: '',\n          values: {},\n          data: {},\n        };\n      }\n\n      const tweets = await service.getTweets(undefined, 5);\n      \n      const tweetText = tweets.length > 0 \n        ? `Recent Twitter activity:\\n${tweets.map((t, i) => `${i + 1}. ${t.text || 'Tweet content'}`).join('\\n')}`\n        : 'No recent Twitter activity';\n\n      return {\n        text: tweetText,\n        values: {\n          twitterTimeline: tweetText,\n          tweetCount: tweets.length,\n        },\n        data: {\n          tweets,\n          source: 'TWITTER_TIMELINE',\n        },\n      };\n    } catch (error) {\n      logger.error('Error in TWITTER_TIMELINE provider:', error);\n      return {\n        text: '',\n        values: {},\n        data: {},\n      };\n    }\n  },\n};\n\n/**\n * XMCPX Twitter Plugin\n * Complete plugin following ElizaOS Plugin interface\n */\nexport const xmcpxPlugin: Plugin = {\n  name: 'xmcpx-twitter',\n  description: 'Enhanced Twitter integration with persistent authentication',\n  \n  // Configuration following plugin-starter pattern\n  config: {\n    TWITTER_USERNAME: process.env.TWITTER_USERNAME,\n    TWITTER_PASSWORD: process.env.TWITTER_PASSWORD,\n    TWITTER_EMAIL: process.env.TWITTER_EMAIL,\n    TWITTER_COOKIES: process.env.TWITTER_COOKIES,\n  },\n\n  // Initialize plugin with config validation\n  async init(config: Record<string, string>) {\n    logger.debug('XMCPX plugin initialized');\n    try {\n      const validatedConfig = await xmcpxConfigSchema.parseAsync(config);\n      \n      // Set environment variables\n      for (const [key, value] of Object.entries(validatedConfig)) {\n        if (value) process.env[key] = value;\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        throw new Error(\n          `Invalid XMCPX configuration: ${error.errors.map((e) => e.message).join(', ')}`\n        );\n      }\n      throw error;\n    }\n  },\n\n  // Services - background functionality\n  services: [XMCPXService],\n\n  // Actions - behaviors the agent can perform\n  actions: [postTweetAction],\n\n  // Providers - data sources for context\n  providers: [twitterTimelineProvider],\n\n  // Routes - HTTP endpoints for external integration\n  routes: [\n    {\n      name: 'twitter-status',\n      path: '/api/twitter/status',\n      type: 'GET',\n      handler: async (_req: any, res: any, runtime: IAgentRuntime) => {\n        const service = runtime.getService(XMCPXService.serviceType) as XMCPXService;\n        res.json({\n          available: !!service,\n          configured: !!(process.env.TWITTER_USERNAME && process.env.TWITTER_PASSWORD),\n        });\n      },\n    },\n  ],\n\n  // Event handlers - respond to runtime events\n  events: {\n    MESSAGE_RECEIVED: [\n      async (params: any) => {\n        logger.debug('XMCPX plugin received MESSAGE_RECEIVED event');\n        // Could implement automatic tweet posting logic here\n      },\n    ],\n  },\n};\n\nexport default xmcpxPlugin;\n","/**\n * Main Project Plugin for ElizaOS\n * \n * Integrates all project-specific actions, providers, and services\n * following official ElizaOS plugin patterns\n */\n\nimport type { Plugin, IAgentRuntime } from '@elizaos/core';\nimport { logger } from '@elizaos/core';\nimport { z } from 'zod';\n\n// Import our actions and providers\nimport { mentorAction, buildCommunityAction } from '../actions/community-actions.js';\nimport { \n  communityContextProvider, \n  learningContextProvider, \n  engagementStrategyProvider \n} from '../providers/community-providers.js';\n\n/**\n * Configuration schema for the project plugin\n */\nconst projectConfigSchema = z.object({\n  CHARACTER_NAME: z.string().default('Nubi'),\n  COMMUNITY_NAME: z.string().default('Developer Community'),\n  ENABLE_MENTORSHIP: z.string().transform(val => val === 'true').default('true'),\n  ENABLE_COMMUNITY_BUILDING: z.string().transform(val => val === 'true').default('true'),\n});\n\n/**\n * Main Project Plugin\n * Contains all the custom functionality for our ElizaOS project\n */\nexport const projectPlugin: Plugin = {\n  name: 'project-main',\n  description: 'Main project plugin with community management, mentorship, and AI agent functionality',\n  \n  // Configuration following ElizaOS patterns\n  config: {\n    CHARACTER_NAME: process.env.CHARACTER_NAME,\n    COMMUNITY_NAME: process.env.COMMUNITY_NAME,\n    ENABLE_MENTORSHIP: process.env.ENABLE_MENTORSHIP,\n    ENABLE_COMMUNITY_BUILDING: process.env.ENABLE_COMMUNITY_BUILDING,\n  },\n\n  // Initialize plugin with config validation\n  async init(config: Record<string, string>, runtime: IAgentRuntime) {\n    logger.debug('Project plugin initialized');\n    try {\n      const validatedConfig = await projectConfigSchema.parseAsync(config);\n      \n      // Set environment variables\n      for (const [key, value] of Object.entries(validatedConfig)) {\n        if (value) process.env[key] = String(value);\n      }\n      \n      logger.info(`Character: ${validatedConfig.CHARACTER_NAME}`);\n      logger.info(`Community: ${validatedConfig.COMMUNITY_NAME}`);\n      logger.info(`Mentorship enabled: ${validatedConfig.ENABLE_MENTORSHIP}`);\n      logger.info(`Community building enabled: ${validatedConfig.ENABLE_COMMUNITY_BUILDING}`);\n      \n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        throw new Error(\n          `Invalid project configuration: ${error.errors.map((e) => e.message).join(', ')}`\n        );\n      }\n      throw error;\n    }\n  },\n\n  // Actions - behaviors the agent can perform\n  actions: [\n    mentorAction,\n    buildCommunityAction,\n  ],\n\n  // Providers - data sources for context\n  providers: [\n    engagementStrategyProvider,  // Run first (position: -1)\n    communityContextProvider,\n    learningContextProvider,\n  ],\n\n  // Routes - HTTP endpoints for status and management\n  routes: [\n    {\n      name: 'project-status',\n      path: '/api/project/status',\n      type: 'GET',\n      handler: async (_req: any, res: any, runtime: IAgentRuntime) => {\n        res.json({\n          character: process.env.CHARACTER_NAME || 'Nubi',\n          community: process.env.COMMUNITY_NAME || 'Developer Community',\n          features: {\n            mentorship: process.env.ENABLE_MENTORSHIP !== 'false',\n            communityBuilding: process.env.ENABLE_COMMUNITY_BUILDING !== 'false',\n          },\n          status: 'active',\n        });\n      },\n    },\n    {\n      name: 'project-actions',\n      path: '/api/project/actions',\n      type: 'GET',\n      handler: async (_req: any, res: any, runtime: IAgentRuntime) => {\n        const actions = runtime.actions.map(action => ({\n          name: action.name,\n          description: action.description,\n          similes: action.similes,\n        }));\n        res.json({ actions });\n      },\n    },\n  ],\n\n  // Event handlers\n  events: {\n    MESSAGE_RECEIVED: [\n      async (params: any) => {\n        logger.debug('Project plugin received MESSAGE_RECEIVED event');\n        // Could implement message analytics here\n      },\n    ],\n  },\n};\n\nexport default projectPlugin;\n","/**\n * Community Management Actions for Nubi\n * \n * Actions that allow Nubi to perform community-related tasks\n * following ElizaOS Action patterns\n */\n\nimport type { \n  Action, \n  IAgentRuntime, \n  Memory, \n  State, \n  ActionResult, \n  HandlerCallback \n} from '@elizaos/core';\nimport { logger } from '@elizaos/core';\n\n/**\n * Mentor Action\n * Provides mentorship and guidance to community members\n */\nexport const mentorAction: Action = {\n  name: 'MENTOR',\n  similes: ['GUIDE', 'COACH', 'TEACH', 'ADVISE', 'HELP_LEARN'],\n  description: 'Provide mentorship, guidance, and educational support to community members',\n\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise<boolean> => {\n    // Validate if the message contains learning-related content or requests for help\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const mentorshipKeywords = [\n      'help', 'learn', 'teach', 'explain', 'guide', 'mentor', 'advice',\n      'how to', 'what is', 'can you', 'struggling with', 'confused about',\n      'best practice', 'recommend', 'suggestion'\n    ];\n    \n    return mentorshipKeywords.some(keyword => text.includes(keyword));\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    options?: any,\n    callback?: HandlerCallback\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Nubi providing mentorship guidance');\n      \n      // Extract the topic or question from the message\n      const userMessage = message.content.text || '';\n      const userName = message.entityId || 'developer';\n      \n      // Determine the type of guidance needed\n      let guidanceType = 'general';\n      if (userMessage.toLowerCase().includes('code')) guidanceType = 'coding';\n      if (userMessage.toLowerCase().includes('career')) guidanceType = 'career';\n      if (userMessage.toLowerCase().includes('community')) guidanceType = 'community';\n      if (userMessage.toLowerCase().includes('prompt')) guidanceType = 'prompting';\n      \n      // Provide context-appropriate mentorship response\n      const mentorshipResponse = generateMentorshipResponse(guidanceType, userMessage);\n      \n      if (callback) {\n        await callback({\n          text: mentorshipResponse,\n          actions: ['MENTOR'],\n          source: message.content.source,\n        });\n      }\n\n      return {\n        text: `Provided ${guidanceType} mentorship guidance`,\n        success: true,\n        data: {\n          action: 'MENTOR',\n          guidanceType,\n          userName,\n          response: mentorshipResponse,\n        },\n      };\n    } catch (error) {\n      logger.error('Error in MENTOR action:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{userName}}',\n        content: {\n          text: 'I\\'m struggling with understanding async/await in JavaScript',\n          actions: [],\n        },\n      },\n      {\n        name: 'Nubi',\n        content: {\n          text: 'Async/await is like having a conversation with someone who takes time to respond. Instead of waiting awkwardly in silence, you can do other things while waiting for their answer. Let me break this down with a practical example...',\n          actions: ['MENTOR'],\n        },\n      },\n    ],\n    [\n      {\n        name: '{{userName}}',\n        content: {\n          text: 'How do I build a good developer portfolio?',\n          actions: [],\n        },\n      },\n      {\n        name: 'Nubi',\n        content: {\n          text: 'A portfolio is your professional story told through code. Think quality over quantity - three polished projects that show your range beat twenty half-finished demos. Here\\'s what actually matters to hiring managers...',\n          actions: ['MENTOR'],\n        },\n      },\n    ],\n  ],\n};\n\n/**\n * Build Community Action\n * Helps with community building and engagement strategies\n */\nexport const buildCommunityAction: Action = {\n  name: 'BUILD_COMMUNITY',\n  similes: ['ENGAGE_COMMUNITY', 'FOSTER_GROWTH', 'BUILD_CONNECTIONS', 'CREATE_VALUE'],\n  description: 'Provide guidance on community building, engagement, and growth strategies',\n\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise<boolean> => {\n    const text = message.content.text?.toLowerCase() || '';\n    \n    const communityKeywords = [\n      'community', 'engagement', 'grow', 'build', 'network', 'connect',\n      'members', 'discord', 'twitter', 'social', 'audience', 'followers',\n      'retention', 'activity', 'participation'\n    ];\n    \n    return communityKeywords.some(keyword => text.includes(keyword));\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    options?: any,\n    callback?: HandlerCallback\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Nubi providing community building guidance');\n      \n      const userMessage = message.content.text || '';\n      \n      // Generate community-focused response\n      const communityGuidance = generateCommunityGuidance(userMessage);\n      \n      if (callback) {\n        await callback({\n          text: communityGuidance,\n          actions: ['BUILD_COMMUNITY'],\n          source: message.content.source,\n        });\n      }\n\n      return {\n        text: 'Provided community building guidance',\n        success: true,\n        data: {\n          action: 'BUILD_COMMUNITY',\n          guidance: communityGuidance,\n        },\n      };\n    } catch (error) {\n      logger.error('Error in BUILD_COMMUNITY action:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{userName}}',\n        content: {\n          text: 'How do I get more engagement in my developer community?',\n          actions: [],\n        },\n      },\n      {\n        name: 'Nubi',\n        content: {\n          text: 'Engagement isn\\'t about posting more - it\\'s about creating conversations worth having. The secret? Ask questions that make people feel smart for answering. Share struggles, not just successes. People connect with vulnerability, not perfection.',\n          actions: ['BUILD_COMMUNITY'],\n        },\n      },\n    ],\n  ],\n};\n\n/**\n * Helper function to generate mentorship responses based on guidance type\n */\nfunction generateMentorshipResponse(guidanceType: string, userMessage: string): string {\n  const responses = {\n    coding: [\n      \"Let me break this down into digestible pieces...\",\n      \"The key insight here is understanding the why, not just the how...\",\n      \"Think of it this way - code is communication, first with future you, then with the computer...\",\n    ],\n    career: [\n      \"Career growth is like compound interest - small, consistent improvements create massive results over time...\",\n      \"Here's what I've learned from watching successful developers navigate their careers...\",\n      \"The best career advice often sounds counterintuitive at first...\",\n    ],\n    community: [\n      \"Building community is like tending a garden - it requires patience, consistency, and genuine care...\",\n      \"The strongest communities aren't built on shared interests, but shared values...\",\n      \"Here's the psychology behind what makes communities thrive...\",\n    ],\n    prompting: [\n      \"Great prompting is like great conversation - it's about asking better questions, not just more questions...\",\n      \"The difference between mediocre and exceptional prompts often comes down to context...\",\n      \"Think of AI as a collaborator, not a search engine...\",\n    ],\n    general: [\n      \"Let me share a perspective that might reframe this challenge...\",\n      \"The best solutions often come from changing the question you're asking...\",\n      \"Here's a mental model that might help you think about this differently...\",\n    ]\n  };\n\n  const responseOptions = responses[guidanceType] || responses.general;\n  return responseOptions[Math.floor(Math.random() * responseOptions.length)];\n}\n\n/**\n * Helper function to generate community building guidance\n */\nfunction generateCommunityGuidance(userMessage: string): string {\n  const guidanceOptions = [\n    \"Community building is about creating value before extracting it. Focus on solving real problems for your members first.\",\n    \"The best communities have clear hierarchies that people can aspire to climb. Give people goals and recognition systems.\",\n    \"Engagement comes from making people feel heard and valued. Respond thoughtfully, not just quickly.\",\n    \"Mystery and exclusivity create desire. Share insights strategically, not all at once.\",\n    \"Break the fourth wall occasionally - authenticity prevents communities from becoming too serious or cult-like.\",\n  ];\n  \n  return guidanceOptions[Math.floor(Math.random() * guidanceOptions.length)];\n}\n","/**\n * Community Providers for ElizaOS\n * \n * Providers that supply contextual data about community, learning, and mentorship\n * following ElizaOS Provider patterns\n */\n\nimport type { Provider, IAgentRuntime, Memory, State, ProviderResult } from '@elizaos/core';\nimport { logger } from '@elizaos/core';\nimport { config } from '../config/environment.js';\n\n/**\n * Community Context Provider\n * Provides information about the current community and user context\n */\nexport const communityContextProvider: Provider = {\n  name: 'COMMUNITY_CONTEXT',\n  description: 'Provides context about the current community and user interaction patterns',\n  \n  get: async (runtime: IAgentRuntime, message: Memory, state: State): Promise<ProviderResult> => {\n    try {\n      // Get community information\n      const communityName = config.COMMUNITY_NAME;\n      const characterName = config.CHARACTER_NAME;\n      \n      // Determine user interaction type\n      const isNewUser = !state.recentMessages || state.recentMessages.length < 3;\n      const isReturningUser = !isNewUser && state.recentMessages.length > 10;\n      \n      // Check message patterns for context\n      const messageText = message.content.text?.toLowerCase() || '';\n      const isAskingForHelp = messageText.includes('help') || messageText.includes('how');\n      const isSharingKnowledge = messageText.includes('learned') || messageText.includes('discovered');\n      \n      const contextText = [\n        `Current community: ${communityName}`,\n        `Agent role: ${characterName} - AI mentor and community guide`,\n        isNewUser ? 'User appears to be new - provide welcoming guidance' : '',\n        isReturningUser ? 'User is an active community member - can use more advanced concepts' : '',\n        isAskingForHelp ? 'User is seeking assistance or learning' : '',\n        isSharingKnowledge ? 'User is contributing knowledge to the community' : '',\n      ].filter(Boolean).join('\\n');\n\n      return {\n        text: contextText,\n        values: {\n          communityName,\n          characterName,\n          isNewUser,\n          isReturningUser,\n          isAskingForHelp,\n          isSharingKnowledge,\n        },\n        data: {\n          community: {\n            name: communityName,\n            character: characterName,\n          },\n          user: {\n            isNew: isNewUser,\n            isReturning: isReturningUser,\n            seekingHelp: isAskingForHelp,\n            contributingKnowledge: isSharingKnowledge,\n          },\n        },\n      };\n    } catch (error) {\n      logger.error('Error in COMMUNITY_CONTEXT provider:', error);\n      return {\n        text: '',\n        values: {},\n        data: {},\n      };\n    }\n  },\n};\n\n/**\n * Learning Context Provider\n * Provides context about learning opportunities and educational content\n */\nexport const learningContextProvider: Provider = {\n  name: 'LEARNING_CONTEXT',\n  description: 'Provides context for educational and mentorship interactions',\n  \n  get: async (runtime: IAgentRuntime, message: Memory, state: State): Promise<ProviderResult> => {\n    try {\n      const messageText = message.content.text?.toLowerCase() || '';\n      \n      // Identify learning-related topics\n      const topics = {\n        coding: ['code', 'programming', 'javascript', 'python', 'react', 'api', 'function', 'debug'],\n        career: ['career', 'job', 'interview', 'resume', 'portfolio', 'salary', 'promotion'],\n        community: ['community', 'network', 'discord', 'twitter', 'engagement', 'growth'],\n        prompting: ['prompt', 'ai', 'gpt', 'claude', 'llm', 'chatbot'],\n        general: ['learn', 'understand', 'explain', 'help', 'guide', 'teach']\n      };\n      \n      const identifiedTopics = Object.entries(topics)\n        .filter(([_, keywords]) => keywords.some(keyword => messageText.includes(keyword)))\n        .map(([topic]) => topic);\n      \n      // Determine learning level based on message complexity\n      const learningLevel = messageText.length > 100 ? 'intermediate' : \n                           messageText.includes('basic') || messageText.includes('beginner') ? 'beginner' :\n                           'general';\n      \n      const contextText = identifiedTopics.length > 0 ? \n        `Learning context: ${identifiedTopics.join(', ')} (${learningLevel} level)` :\n        'General inquiry - assess learning needs dynamically';\n\n      return {\n        text: contextText,\n        values: {\n          learningTopics: identifiedTopics.join(', '),\n          learningLevel,\n          hasLearningContext: identifiedTopics.length > 0,\n        },\n        data: {\n          learning: {\n            topics: identifiedTopics,\n            level: learningLevel,\n            identified: identifiedTopics.length > 0,\n          },\n        },\n      };\n    } catch (error) {\n      logger.error('Error in LEARNING_CONTEXT provider:', error);\n      return {\n        text: '',\n        values: {},\n        data: {},\n      };\n    }\n  },\n};\n\n/**\n * Engagement Strategy Provider\n * Provides context for how to engage with the user based on their message patterns\n */\nexport const engagementStrategyProvider: Provider = {\n  name: 'ENGAGEMENT_STRATEGY',\n  description: 'Provides strategic context for user engagement and interaction style',\n  position: -1, // Run early to influence other providers\n  \n  get: async (runtime: IAgentRuntime, message: Memory, state: State): Promise<ProviderResult> => {\n    try {\n      const messageText = message.content.text || '';\n      \n      // Analyze message characteristics\n      const hasQuestions = messageText.includes('?');\n      const isLongMessage = messageText.length > 200;\n      const isShortMessage = messageText.length < 50;\n      const hasEmotionalWords = /frustrat|confus|excit|amaz|struggl|love|hate/i.test(messageText);\n      const hasTechnicalTerms = /api|function|code|error|debug|deploy|server/i.test(messageText);\n      \n      // Determine engagement strategy\n      let strategy = 'standard';\n      if (hasQuestions && hasTechnicalTerms) strategy = 'technical_mentor';\n      else if (hasEmotionalWords) strategy = 'empathetic_guide';\n      else if (isShortMessage && !hasQuestions) strategy = 'conversation_starter';\n      else if (isLongMessage) strategy = 'detailed_responder';\n      \n      const strategyGuidance = {\n        technical_mentor: 'Provide detailed technical guidance with examples',\n        empathetic_guide: 'Acknowledge emotions and provide supportive guidance',\n        conversation_starter: 'Ask engaging questions to encourage deeper discussion',\n        detailed_responder: 'Match the user\\'s detail level and thoroughness',\n        standard: 'Use balanced approach with humor and insight',\n      };\n\n      return {\n        text: `Engagement strategy: ${strategy}`,\n        values: {\n          engagementStrategy: strategy,\n          strategyGuidance: strategyGuidance[strategy],\n          hasQuestions,\n          hasEmotionalContent: hasEmotionalWords,\n          hasTechnicalContent: hasTechnicalTerms,\n        },\n        data: {\n          engagement: {\n            strategy,\n            guidance: strategyGuidance[strategy],\n            characteristics: {\n              hasQuestions,\n              isLongMessage,\n              isShortMessage,\n              hasEmotionalWords,\n              hasTechnicalTerms,\n            },\n          },\n        },\n      };\n    } catch (error) {\n      logger.error('Error in ENGAGEMENT_STRATEGY provider:', error);\n      return {\n        text: '',\n        values: {},\n        data: {},\n      };\n    }\n  },\n};\n","/**\n * Plugins Index - ElizaOS Standard Structure\n * \n * This file exports all available plugins for the ElizaOS project.\n * Follows official ElizaOS plugin patterns and standards.\n */\n\nimport { features } from '../config/environment.js';\nimport { xmcpxPlugin } from './xmcpx-plugin.js';\nimport { projectPlugin } from './project-plugin.js';\n\n// Export custom plugins\nexport { xmcpxPlugin, projectPlugin };\n\n/**\n * Get plugins based on environment configuration\n * Returns array of Plugin objects and plugin names for ElizaOS\n */\nexport function getEnabledPlugins() {\n  const plugins: any[] = [\n    '@elizaos/plugin-bootstrap', // Always included - core functionality\n    '@elizaos/plugin-sql',       // Database support\n    projectPlugin,               // Always included - our main project functionality\n  ];\n  \n  // Add conditional plugins based on configuration\n  if (features.hasTwitter) {\n    plugins.push(xmcpxPlugin);\n  }\n  \n  if (features.hasDiscord) {\n    plugins.push('@elizaos/plugin-discord');\n  }\n  \n  if (features.hasTelegram) {\n    plugins.push('@elizaos/plugin-telegram');\n  }\n  \n  return plugins;\n}\n","import { Project, ProjectAgent, IAgentRuntime } from '@elizaos/core';\nimport { defaultCharacter, getCharacter } from './characters/index.js';\nimport { config } from './config/environment.js';\nimport { getEnabledPlugins } from './plugins/index.js';\n\n// Get character based on environment configuration\nconst character = getCharacter(config.CHARACTER_NAME);\n\n// Get enabled plugins based on configuration\nconst enabledPlugins = getEnabledPlugins();\n\nexport const projectAgent: ProjectAgent = {\n  character,\n  plugins: enabledPlugins,\n  init: async (runtime: IAgentRuntime) => {\n    console.log(`Initializing agent: ${character.name}`);\n    console.log(`Community: ${config.COMMUNITY_NAME}`);\n    console.log(`Environment: ${config.NODE_ENV}`);\n    console.log(`Enabled plugins: ${enabledPlugins.length}`);\n  },\n};\n\nconst project: Project = {\n  agents: [projectAgent],\n};\n\nexport default project;"],"mappings":"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","names":["config","z","config","logger","z","logger","logger","logger","z","config","logger","character"]}