export { CharacterFactory, characterFactory } from './factories/character.factory';
export { CharacterValidator, characterValidator } from './__tests__/infrastructure/character.validator';
export { getValidatedCharacters, getValidatedCharacter, getCharacterValidationSummary } from './characters';
export { ServiceBuilder, ServiceRegistryBuilder, ServiceBuilderUtils } from './builders/service.builder';
export { OptimizedService } from './services/base/optimized-service';
export * from './schemas/character.schema';
export { communityManagementTemplates, getCommunityTemplate, getAllCommunityTemplates, getTemplatesByFeatures } from './templates/community-management.templates';
export { CommunityMemoryService } from './services/memory/community-memory.service';
export { CommunityManagementService } from './services/community/community-management.service';
export type { CommunityManagementTemplate, CommunityMemoryConfig, CommunityManagementConfig, CommunityMember, ModerationAction, CommunityGuideline, CommunityHealthMetrics, MemoryMetrics, CommunityInsight } from './services/memory/community-memory.service';
export { characters } from './characters';
export { getExampleAgent } from './characters/example-agent';
export { getCommunityManager } from './characters/community-manager';
export { nubiCharacter } from './characters/nubi';
export { agentUtils } from './plugins/agent-utils';
import { CharacterFactory } from './factories/character.factory';
import { CharacterValidator } from './__tests__/infrastructure/character.validator';
import { CommunityMemoryService } from './services/memory/community-memory.service';
import { CommunityManagementService } from './services/community/community-management.service';
export declare const character: () => import("@elizaos/core").Character;
export declare const elizaosUtils: {
    createCharacter: typeof CharacterFactory.createCharacter;
    createCharacterSafe: typeof CharacterFactory.createCharacterSafe;
    createFromTemplate: typeof CharacterFactory.createFromTemplate;
    validateExistingCharacter: typeof CharacterFactory.validateExistingCharacter;
    getAvailableTemplates: typeof CharacterFactory.getAvailableTemplates;
    getDefaultSettings: typeof CharacterFactory.getDefaultSettings;
    validateCharacter: typeof CharacterValidator.validateCharacter;
    getValidationSummary: typeof CharacterValidator.getValidationSummary;
    validateCharacters: typeof CharacterValidator.validateCharacters;
    createService: <T = any>(name: string, type: string) => import(".").ServiceBuilder<T>;
    createHighPriorityService: <T = any>(name: string, type: string) => import(".").ServiceBuilder<T>;
    createLowPriorityService: <T = any>(name: string, type: string) => import(".").ServiceBuilder<T>;
    createCommunityMemoryService: (runtime: any, config?: any) => CommunityMemoryService;
    createCommunityManagementService: (runtime: any, config?: any) => CommunityManagementService;
    getCommunityTemplates: () => Promise<import("./templates/community-management.templates").CommunityManagementTemplate[]>;
    getCommunityTemplate: (id: string) => Promise<import("./templates/community-management.templates").CommunityManagementTemplate | undefined>;
    createMemory: (runtime: any, content: string, metadata: any) => Promise<`${string}-${string}-${string}-${string}-${string}`>;
    searchMemories: (runtime: any, query: string, options?: any) => Promise<import("@elizaos/core").Memory[]>;
    getCommunityInsights: (runtime: any, roomId?: any, timeframe?: number) => Promise<import(".").CommunityInsight[]>;
};
export default elizaosUtils;
