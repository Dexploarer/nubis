/**
 * Runtime Integration Templates
 * Templates that properly integrate with ElizaOS Core Runtime components
 * for efficient and correct usage of AgentRuntime, IAgentRuntime, and Service classes
 */
/**
 * Runtime Service Integration Template
 * Template for properly using runtime services and service registry
 */
export declare const runtimeServiceIntegrationTemplate = "<task>Integrate with ElizaOS runtime services for {{agentName}} using proper service patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nUse the ElizaOS runtime service system correctly and efficiently:\n\n1. **Service Registry Access**: Use runtime.getService<T>(serviceType) for type-safe service access\n2. **Service Lifecycle**: Respect service start/stop lifecycle methods\n3. **Service Type Safety**: Leverage TypeScript generics for service type safety\n4. **Service Capabilities**: Access service capabilityDescription and methods\n\nRUNTIME SERVICE INTEGRATION RULES:\n- Always use runtime.getService<T>(serviceType) for service access\n- Check service availability before use: const service = runtime.getService<MyService>('my-service')\n- Use service type safety: runtime.getService<IBrowserService>('browser')\n- Respect service lifecycle: Don't call methods on stopped services\n- Handle service errors gracefully with proper fallbacks\n- Use service capabilities: service.capabilityDescription for understanding\n\nGenerate a response that properly leverages runtime services.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your runtime service integration analysis</thought>\n    <actions>SERVICE_LOOKUP,SERVICE_VALIDATION,SERVICE_OPERATION,REPLY</actions>\n    <providers>RUNTIME_SERVICES,SERVICE_REGISTRY</providers>\n    <text>Your response with proper runtime service integration</text>\n</response>\n</output>";
/**
 * Runtime Action Management Template
 * Template for properly using runtime actions and action system
 */
export declare const runtimeActionManagementTemplate = "<task>Manage ElizaOS runtime actions for {{agentName}} using proper action patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nUse the ElizaOS runtime action system correctly and efficiently:\n\n1. **Action Registration**: Actions are registered via runtime.actions array\n2. **Action Execution**: Use runtime.processActions() for action execution\n3. **Action Validation**: Leverage action.validate() before execution\n4. **Action Examples**: Use action.examples for training and context\n\nRUNTIME ACTION MANAGEMENT RULES:\n- Access actions via runtime.actions array\n- Use action.validate() to check if action should run\n- Execute actions via runtime.processActions() method\n- Respect action examples and similes for context\n- Handle action results properly with error checking\n- Use action metadata for categorization and filtering\n\nGenerate a response that properly manages runtime actions.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your runtime action management analysis</thought>\n    <actions>ACTION_VALIDATION,ACTION_EXECUTION,RESULT_PROCESSING,REPLY</actions>\n    <providers>RUNTIME_ACTIONS,ACTION_SYSTEM</providers>\n    <text>Your response with proper runtime action management</text>\n</response>\n</output>";
/**
 * Runtime Provider Integration Template
 * Template for properly using runtime providers and provider system
 */
export declare const runtimeProviderIntegrationTemplate = "<task>Integrate with ElizaOS runtime providers for {{agentName}} using proper provider patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nUse the ElizaOS runtime provider system correctly and efficiently:\n\n1. **Provider Access**: Access providers via runtime.providers array\n2. **Provider Execution**: Use runtime.getProviderResults() for provider execution\n3. **Provider Evaluation**: Use runtime.evaluateProviders() for provider evaluation\n4. **Provider Capabilities**: Understand provider.dynamic and provider.private flags\n\nRUNTIME PROVIDER INTEGRATION RULES:\n- Access providers via runtime.providers array\n- Use runtime.getProviderResults() for data retrieval\n- Use runtime.evaluateProviders() for provider evaluation\n- Respect provider.dynamic flag for real-time data\n- Handle provider.private flag for access control\n- Use provider.position for ordering when needed\n- Cache provider results when appropriate\n\nGenerate a response that properly integrates with runtime providers.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your runtime provider integration analysis</thought>\n    <actions>PROVIDER_LOOKUP,PROVIDER_EXECUTION,RESULT_EVALUATION,REPLY</actions>\n    <providers>RUNTIME_PROVIDERS,PROVIDER_SYSTEM</providers>\n    <text>Your response with proper runtime provider integration</text>\n</response>\n</output>";
/**
 * Runtime Memory System Template
 * Template for properly using runtime memory system
 */
export declare const runtimeMemorySystemTemplate = "<task>Use ElizaOS runtime memory system for {{agentName}} using proper memory patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nUse the ElizaOS runtime memory system correctly and efficiently:\n\n1. **Memory Creation**: Use runtime.createMemory() for memory creation\n2. **Memory Retrieval**: Use runtime.getMemories() for memory retrieval\n3. **Memory Search**: Use runtime.searchMemories() for semantic search\n4. **Memory Types**: Leverage MemoryType enum for proper memory categorization\n\nRUNTIME MEMORY SYSTEM RULES:\n- Use runtime.createMemory(memory, tableName) for creation\n- Use runtime.getMemories(options) for retrieval\n- Use runtime.searchMemories(query, options) for semantic search\n- Respect MemoryType: DOCUMENT, FRAGMENT, MESSAGE, DESCRIPTION, CUSTOM\n- Use memory.metadata.scope for access control: 'shared', 'private', 'room'\n- Handle memory.embedding for vector similarity search\n- Use memory.unique flag to prevent duplicates\n\nGenerate a response that properly uses the runtime memory system.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your runtime memory system analysis</thought>\n    <actions>MEMORY_CREATION,MEMORY_RETRIEVAL,MEMORY_SEARCH,REPLY</actions>\n    <providers>RUNTIME_MEMORY,MEMORY_SYSTEM</providers>\n    <text>Your response with proper runtime memory system usage</text>\n</response>\n</output>";
/**
 * Runtime Model Management Template
 * Template for properly using runtime model system
 */
export declare const runtimeModelManagementTemplate = "<task>Use ElizaOS runtime model system for {{agentName}} using proper model patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nUse the ElizaOS runtime model system correctly and efficiently:\n\n1. **Model Access**: Use runtime.getModel(type) for model access\n2. **Model Types**: Leverage ModelType enum for proper model selection\n3. **Model Parameters**: Use proper parameter types for model calls\n4. **Model Results**: Handle model results with proper typing\n\nRUNTIME MODEL MANAGEMENT RULES:\n- Use runtime.getModel(ModelType.TEXT_GENERATION) for text generation\n- Use runtime.getModel(ModelType.EMBEDDING) for embeddings\n- Use runtime.getModel(ModelType.IMAGE_GENERATION) for image generation\n- Handle model parameters with proper typing\n- Use model-specific settings from MODEL_SETTINGS\n- Handle model errors and rate limits gracefully\n- Cache model results when appropriate\n\nGenerate a response that properly uses the runtime model system.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your runtime model management analysis</thought>\n    <actions>MODEL_SELECTION,MODEL_EXECUTION,RESULT_PROCESSING,REPLY</actions>\n    <providers>RUNTIME_MODELS,MODEL_SYSTEM</providers>\n    <text>Your response with proper runtime model system usage</text>\n</response>\n</output>";
/**
 * Runtime Event System Template
 * Template for properly using runtime event system
 */
export declare const runtimeEventSystemTemplate = "<task>Use ElizaOS runtime event system for {{agentName}} using proper event patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nUse the ElizaOS runtime event system correctly and efficiently:\n\n1. **Event Registration**: Use runtime.events Map for event handling\n2. **Event Types**: Leverage EventType enum for proper event categorization\n3. **Event Handlers**: Register event handlers with proper typing\n4. **Event Publishing**: Use event bus for inter-service communication\n\nRUNTIME EVENT SYSTEM RULES:\n- Access events via runtime.events Map\n- Use EventType enum for event categorization\n- Register event handlers with proper typing\n- Use event bus for inter-service communication\n- Handle event errors gracefully\n- Use event payloads for data transfer\n- Clean up event handlers on service stop\n\nGenerate a response that properly uses the runtime event system.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your runtime event system analysis</thought>\n    <actions>EVENT_REGISTRATION,EVENT_HANDLING,EVENT_PUBLISHING,REPLY</actions>\n    <providers>RUNTIME_EVENTS,EVENT_SYSTEM</providers>\n    <text>Your response with proper runtime event system usage</text>\n</response>\n</output>";
/**
 * Runtime Database Integration Template
 * Template for properly using runtime database system
 */
export declare const runtimeDatabaseIntegrationTemplate = "<task>Use ElizaOS runtime database system for {{agentName}} using proper database patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nUse the ElizaOS runtime database system correctly and efficiently:\n\n1. **Database Access**: Use runtime.getDatabase() for database access\n2. **Database Adapter**: Leverage IDatabaseAdapter interface for operations\n3. **Database Operations**: Use proper database methods for CRUD operations\n4. **Database Transactions**: Handle transactions and rollbacks properly\n\nRUNTIME DATABASE INTEGRATION RULES:\n- Use runtime.getDatabase() to access database adapter\n- Use IDatabaseAdapter interface for type safety\n- Handle database connection errors gracefully\n- Use proper transaction management\n- Handle database rollbacks on errors\n- Use database connection pooling when available\n- Cache database results when appropriate\n\nGenerate a response that properly uses the runtime database system.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your runtime database integration analysis</thought>\n    <actions>DATABASE_ACCESS,DATABASE_OPERATION,TRANSACTION_MANAGEMENT,REPLY</actions>\n    <providers>RUNTIME_DATABASE,DATABASE_SYSTEM</providers>\n    <text>Your response with proper runtime database system usage</text>\n</response>\n</output>";
/**
 * Runtime Plugin Management Template
 * Template for properly using runtime plugin system
 */
export declare const runtimePluginManagementTemplate = "<task>Use ElizaOS runtime plugin system for {{agentName}} using proper plugin patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nUse the ElizaOS runtime plugin system correctly and efficiently:\n\n1. **Plugin Registration**: Use runtime.registerPlugin() for plugin registration\n2. **Plugin Access**: Access plugins via runtime.plugins array\n3. **Plugin Lifecycle**: Respect plugin init and destroy lifecycle\n4. **Plugin Dependencies**: Handle plugin dependencies properly\n\nRUNTIME PLUGIN MANAGEMENT RULES:\n- Use runtime.registerPlugin(plugin) for registration\n- Access plugins via runtime.plugins array\n- Respect plugin.priority for loading order\n- Handle plugin.dependencies for proper initialization\n- Use plugin.init() for initialization\n- Handle plugin errors gracefully\n- Clean up plugins on shutdown\n\nGenerate a response that properly uses the runtime plugin system.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your runtime plugin management analysis</thought>\n    <actions>PLUGIN_REGISTRATION,PLUGIN_INITIALIZATION,PLUGIN_ACCESS,REPLY</actions>\n    <providers>RUNTIME_PLUGINS,PLUGIN_SYSTEM</providers>\n    <text>Your response with proper runtime plugin system usage</text>\n</response>\n</output>";
/**
 * Runtime State Management Template
 * Template for properly using runtime state management
 */
export declare const runtimeStateManagementTemplate = "<task>Use ElizaOS runtime state management for {{agentName}} using proper state patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nUse the ElizaOS runtime state management correctly and efficiently:\n\n1. **State Access**: Access state via State interface with proper typing\n2. **State Updates**: Update state.values and state.data properly\n3. **State Persistence**: Use state.text for persistent state representation\n4. **State Validation**: Validate state changes before applying\n\nRUNTIME STATE MANAGEMENT RULES:\n- Use State interface for proper typing\n- Update state.values for general state variables\n- Update state.data for structured data\n- Use state.text for persistent state representation\n- Validate state changes before applying\n- Handle state conflicts gracefully\n- Use state metadata for additional context\n\nGenerate a response that properly uses runtime state management.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your runtime state management analysis</thought>\n    <actions>STATE_ACCESS,STATE_UPDATE,STATE_VALIDATION,REPLY</actions>\n    <providers>RUNTIME_STATE,STATE_SYSTEM</providers>\n    <text>Your response with proper runtime state management usage</text>\n</response>\n</output>";
declare const _default: {
    runtimeServiceIntegrationTemplate: string;
    runtimeActionManagementTemplate: string;
    runtimeProviderIntegrationTemplate: string;
    runtimeMemorySystemTemplate: string;
    runtimeModelManagementTemplate: string;
    runtimeEventSystemTemplate: string;
    runtimeDatabaseIntegrationTemplate: string;
    runtimePluginManagementTemplate: string;
    runtimeStateManagementTemplate: string;
};
export default _default;
