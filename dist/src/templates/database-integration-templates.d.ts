/**
 * Database Integration Templates
 * Templates that properly integrate with ElizaOS database integration layer
 * including abstract adapter interface, Drizzle implementation, configuration,
 * schema, connection management, and embedding dimension management
 */
/**
 * Database Adapter Interface Template
 * Template for properly using the IDatabaseAdapter interface
 */
export declare const databaseAdapterInterfaceTemplate = "<task>Use ElizaOS database adapter interface for {{agentName}} using proper adapter patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nUse the ElizaOS IDatabaseAdapter interface correctly and efficiently:\n\n1. **Adapter Access**: Use runtime.getDatabase() to access the database adapter\n2. **Interface Methods**: Leverage all IDatabaseAdapter methods for data operations\n3. **Type Safety**: Use proper TypeScript interfaces for database operations\n4. **Error Handling**: Handle database adapter errors gracefully\n\nDATABASE ADAPTER INTERFACE RULES:\n- Access via runtime.getDatabase(): IDatabaseAdapter\n- Use adapter.createAgent(), adapter.getAgent() for agent management\n- Use adapter.createEntity(), adapter.getEntity() for entity management\n- Use adapter.createMemory(), adapter.getMemory() for memory operations\n- Use adapter.createRoom(), adapter.getRoom() for room management\n- Handle adapter errors with proper fallbacks\n- Use adapter.isConnected() for connection health checks\n- Leverage adapter.getConnectionInfo() for debugging\n\nGenerate a response that properly uses the database adapter interface.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your database adapter interface analysis</thought>\n    <actions>ADAPTER_ACCESS,INTERFACE_METHODS,ERROR_HANDLING,REPLY</actions>\n    <providers>DATABASE_ADAPTER,INTERFACE_SYSTEM</providers>\n    <text>Your response with proper database adapter interface usage</text>\n</response>\n</output>";
/**
 * Drizzle ORM Integration Template
 * Template for properly using the BaseDrizzleAdapter with Drizzle ORM
 */
export declare const drizzleOrmIntegrationTemplate = "<task>Use ElizaOS Drizzle ORM integration for {{agentName}} using proper ORM patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nUse the ElizaOS Drizzle ORM integration correctly and efficiently:\n\n1. **Drizzle Adapter**: Use BaseDrizzleAdapter for SQL operations\n2. **ORM Patterns**: Leverage Drizzle ORM for type-safe database operations\n3. **Schema Awareness**: Use proper database schema definitions\n4. **Query Building**: Build efficient queries using Drizzle query builder\n\nDRIZZLE ORM INTEGRATION RULES:\n- Use BaseDrizzleAdapter for PostgreSQL and PGLite support\n- Leverage Drizzle schema definitions for type safety\n- Use Drizzle query builder for complex queries\n- Handle both PostgreSQL and PGLite backends\n- Use proper table relationships and joins\n- Leverage Drizzle migrations for schema updates\n- Use Drizzle transactions for atomic operations\n- Handle ORM-specific errors gracefully\n\nGenerate a response that properly uses the Drizzle ORM integration.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your Drizzle ORM integration analysis</thought>\n    <actions>ORM_SELECTION,SCHEMA_AWARENESS,QUERY_BUILDING,REPLY</actions>\n    <providers>DRIZZLE_ORM,SCHEMA_SYSTEM</providers>\n    <text>Your response with proper Drizzle ORM integration usage</text>\n</response>\n</output>";
/**
 * Database Configuration Template
 * Template for properly configuring database connections and settings
 */
export declare const databaseConfigurationTemplate = "<task>Configure ElizaOS database connections for {{agentName}} using proper configuration patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nConfigure ElizaOS database connections correctly and efficiently:\n\n1. **Environment Variables**: Use proper environment variable configuration\n2. **Connection Strings**: Handle PostgreSQL and PGLite connection strings\n3. **Connection Pooling**: Configure connection pooling settings\n4. **Backend Selection**: Choose appropriate database backend\n\nDATABASE CONFIGURATION RULES:\n- Use POSTGRES_URL for PostgreSQL connections\n- Use PGLITE_DATA_DIR for PGLite connections\n- Configure connection pooling for performance\n- Handle connection string validation\n- Support multiple backend configurations\n- Use environment-specific settings\n- Handle configuration errors gracefully\n- Validate connection parameters\n\nGenerate a response that properly configures database connections.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your database configuration analysis</thought>\n    <actions>ENV_CONFIG,CONNECTION_STRING,POOL_CONFIG,REPLY</actions>\n    <providers>DATABASE_CONFIG,ENV_SYSTEM</providers>\n    <text>Your response with proper database configuration</text>\n</response>\n</output>";
/**
 * Database Schema and Tables Template
 * Template for properly working with database schema and core tables
 */
export declare const databaseSchemaTablesTemplate = "<task>Work with ElizaOS database schema and tables for {{agentName}} using proper schema patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nWork with ElizaOS database schema and tables correctly and efficiently:\n\n1. **Core Tables**: Use proper table definitions for agents, entities, memories, rooms\n2. **Schema Operations**: Leverage schema for type-safe database operations\n3. **Table Relationships**: Handle table relationships and foreign keys properly\n4. **Schema Migrations**: Use schema migration mechanisms\n\nDATABASE SCHEMA AND TABLES RULES:\n- Use agents table for agent management\n- Use entities table for entity management\n- Use memories table for memory storage\n- Use rooms table for room/channel management\n- Handle table relationships properly\n- Use schema migrations for updates\n- Leverage schema for validation\n- Handle schema versioning\n\nGenerate a response that properly works with database schema and tables.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your database schema and tables analysis</thought>\n    <actions>SCHEMA_ACCESS,TABLE_OPERATIONS,RELATIONSHIP_HANDLING,REPLY</actions>\n    <providers>DATABASE_SCHEMA,TABLE_SYSTEM</providers>\n    <text>Your response with proper database schema and tables usage</text>\n</response>\n</output>";
/**
 * Database Connection Management Template
 * Template for properly managing database connections and retry logic
 */
export declare const databaseConnectionManagementTemplate = "<task>Manage ElizaOS database connections for {{agentName}} using proper connection patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nManage ElizaOS database connections correctly and efficiently:\n\n1. **Connection Health**: Monitor connection health and status\n2. **Retry Logic**: Implement exponential backoff retry logic\n3. **Connection Pooling**: Manage connection pool efficiently\n4. **Graceful Degradation**: Handle connection failures gracefully\n\nDATABASE CONNECTION MANAGEMENT RULES:\n- Use adapter.isConnected() for health checks\n- Implement exponential backoff retry logic\n- Handle connection pool exhaustion\n- Monitor connection performance\n- Implement graceful degradation\n- Handle connection timeouts\n- Use connection pooling efficiently\n- Clean up connections properly\n\nGenerate a response that properly manages database connections.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your database connection management analysis</thought>\n    <actions>HEALTH_CHECK,RETRY_LOGIC,POOL_MANAGEMENT,REPLY</actions>\n    <providers>CONNECTION_SYSTEM,HEALTH_MONITOR</providers>\n    <text>Your response with proper database connection management</text>\n</response>\n</output>";
/**
 * Database Plugin Integration Template
 * Template for properly integrating database operations with the plugin system
 */
export declare const databasePluginIntegrationTemplate = "<task>Integrate database operations with ElizaOS plugin system for {{agentName}} using proper plugin patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nIntegrate database operations with the ElizaOS plugin system correctly and efficiently:\n\n1. **Plugin Registration**: Register database adapters with the plugin system\n2. **Migration Management**: Handle database migrations through plugins\n3. **Plugin Lifecycle**: Manage database plugin lifecycle properly\n4. **Dependency Management**: Handle plugin dependencies for database operations\n\nDATABASE PLUGIN INTEGRATION RULES:\n- Register database adapters as plugins\n- Handle plugin initialization for database setup\n- Manage database migrations through plugins\n- Handle plugin dependencies properly\n- Use plugin lifecycle for database operations\n- Handle plugin errors gracefully\n- Clean up database resources on plugin shutdown\n- Use plugin configuration for database settings\n\nGenerate a response that properly integrates database operations with the plugin system.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your database plugin integration analysis</thought>\n    <actions>PLUGIN_REGISTRATION,MIGRATION_MANAGEMENT,LIFECYCLE_HANDLING,REPLY</actions>\n    <providers>PLUGIN_SYSTEM,MIGRATION_SYSTEM</providers>\n    <text>Your response with proper database plugin integration</text>\n</response>\n</output>";
/**
 * Database Embedding Dimension Management Template
 * Template for properly managing vector embeddings and dimensions
 */
export declare const databaseEmbeddingDimensionTemplate = "<task>Manage ElizaOS database embedding dimensions for {{agentName}} using proper embedding patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nManage ElizaOS database embedding dimensions correctly and efficiently:\n\n1. **Dimension Management**: Handle vector embedding dimensions properly\n2. **Embedding Storage**: Store and retrieve vector embeddings efficiently\n3. **Dimension Compatibility**: Check dimension compatibility across operations\n4. **Vector Operations**: Perform vector similarity searches and operations\n\nDATABASE EMBEDDING DIMENSION RULES:\n- Handle VECTOR_DIMS constant for dimension management\n- Store embeddings with proper dimension validation\n- Check dimension compatibility before operations\n- Use efficient vector similarity search\n- Handle embedding storage optimization\n- Manage embedding metadata properly\n- Use proper indexing for vector operations\n- Handle dimension mismatches gracefully\n\nGenerate a response that properly manages database embedding dimensions.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your database embedding dimension analysis</thought>\n    <actions>DIMENSION_CHECK,EMBEDDING_STORAGE,VECTOR_OPERATIONS,REPLY</actions>\n    <providers>EMBEDDING_SYSTEM,VECTOR_SYSTEM</providers>\n    <text>Your response with proper database embedding dimension management</text>\n</response>\n</output>";
/**
 * Database Transaction Management Template
 * Template for properly managing database transactions and atomic operations
 */
export declare const databaseTransactionManagementTemplate = "<task>Manage ElizaOS database transactions for {{agentName}} using proper transaction patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nManage ElizaOS database transactions correctly and efficiently:\n\n1. **Transaction Creation**: Create and manage database transactions\n2. **Atomic Operations**: Ensure atomic operations across multiple database calls\n3. **Rollback Handling**: Handle transaction rollbacks properly\n4. **Transaction Isolation**: Manage transaction isolation levels\n\nDATABASE TRANSACTION MANAGEMENT RULES:\n- Use transactions for atomic operations\n- Handle transaction rollbacks gracefully\n- Manage transaction isolation levels\n- Use proper transaction boundaries\n- Handle transaction timeouts\n- Implement transaction retry logic\n- Clean up transaction resources\n- Use transactions for data consistency\n\nGenerate a response that properly manages database transactions.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your database transaction management analysis</thought>\n    <actions>TRANSACTION_CREATION,ATOMIC_OPERATIONS,ROLLBACK_HANDLING,REPLY</actions>\n    <providers>TRANSACTION_SYSTEM,CONSISTENCY_SYSTEM</providers>\n    <text>Your response with proper database transaction management</text>\n</response>\n</output>";
/**
 * Database Performance Optimization Template
 * Template for optimizing database performance and query efficiency
 */
export declare const databasePerformanceOptimizationTemplate = "<task>Optimize ElizaOS database performance for {{agentName}} using proper optimization patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nOptimize ElizaOS database performance correctly and efficiently:\n\n1. **Query Optimization**: Optimize database queries for performance\n2. **Indexing Strategy**: Use proper indexing for efficient data retrieval\n3. **Connection Pooling**: Optimize connection pool usage\n4. **Caching Strategy**: Implement database result caching\n\nDATABASE PERFORMANCE OPTIMIZATION RULES:\n- Use efficient query patterns\n- Implement proper indexing strategy\n- Optimize connection pool usage\n- Use database result caching\n- Monitor query performance\n- Handle large result sets efficiently\n- Use batch operations where possible\n- Implement query result pagination\n\nGenerate a response that properly optimizes database performance.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your database performance optimization analysis</thought>\n    <actions>QUERY_OPTIMIZATION,INDEXING_STRATEGY,POOL_OPTIMIZATION,REPLY</actions>\n    <providers>PERFORMANCE_SYSTEM,OPTIMIZATION_SYSTEM</providers>\n    <text>Your response with proper database performance optimization</text>\n</response>\n</output>";
/**
 * Database Error Handling and Recovery Template
 * Template for properly handling database errors and implementing recovery mechanisms
 */
export declare const databaseErrorHandlingRecoveryTemplate = "<task>Handle ElizaOS database errors and implement recovery for {{agentName}} using proper error handling patterns.</task>\n\n<providers>\n{{providers}}\n</providers>\n\n<instructions>\nHandle ElizaOS database errors and implement recovery correctly and efficiently:\n\n1. **Error Classification**: Classify and handle different types of database errors\n2. **Recovery Mechanisms**: Implement proper recovery mechanisms\n3. **Fallback Strategies**: Use fallback strategies for database failures\n4. **Error Logging**: Implement comprehensive error logging and monitoring\n\nDATABASE ERROR HANDLING AND RECOVERY RULES:\n- Classify database errors by type\n- Implement exponential backoff retry\n- Use fallback strategies for failures\n- Implement comprehensive error logging\n- Monitor database error rates\n- Handle connection failures gracefully\n- Implement circuit breaker patterns\n- Use health checks for recovery\n\nGenerate a response that properly handles database errors and implements recovery.\n</instructions>\n\n<output>\nRespond using XML format:\n<response>\n    <thought>Your database error handling and recovery analysis</thought>\n    <actions>ERROR_CLASSIFICATION,RECOVERY_MECHANISMS,FALLBACK_STRATEGIES,REPLY</actions>\n    <providers>ERROR_SYSTEM,RECOVERY_SYSTEM</providers>\n    <text>Your response with proper database error handling and recovery</text>\n</response>\n</output>";
declare const _default: {
    databaseAdapterInterfaceTemplate: string;
    drizzleOrmIntegrationTemplate: string;
    databaseConfigurationTemplate: string;
    databaseSchemaTablesTemplate: string;
    databaseConnectionManagementTemplate: string;
    databasePluginIntegrationTemplate: string;
    databaseEmbeddingDimensionTemplate: string;
    databaseTransactionManagementTemplate: string;
    databasePerformanceOptimizationTemplate: string;
    databaseErrorHandlingRecoveryTemplate: string;
};
export default _default;
